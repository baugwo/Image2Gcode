<?xml version="1.0"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
               creationComplete="initApp(event)" backgroundColor="#f0f0f0" pageTitle="Image2Gcode">

    <fx:Script>
        <![CDATA[
        import mx.events.FlexEvent;
        import mx.managers.PopUpManager;

        import org.lmn.laserRaster.assets.SpriteSheet;
        import org.lmn.laserRaster.classes.RasterImage;
        //import org.lmn.laserRaster.StartConfiguration;
        import org.lmn.laserRaster.LaserConfiguration;
        import org.lmn.laserRaster.views.ColorCorrectorPopup;
        import org.lmn.laserRaster.views.ResizePopup;
        //import org.lmn.laserRaster.views.StartPopup;

        [Embed(source='org/lmn/laserRaster/assets/glyphicons-halflings.png')]
        protected var glyphBitmap:Class; 

        [Bindable]
        protected var myImage:RasterImage = new RasterImage();
        protected var data:LaserConfiguration = new LaserConfiguration();
        //protected var sdata:StartConfiguration = new StartConfiguration();
        protected var glyphIcons:SpriteSheet = new SpriteSheet(new glyphBitmap(), 24, 24);

        private var _imageContainer:SpriteVisualElement;
        private var inColor:Boolean;

        protected function initApp(event:FlexEvent):void
        {
            btnOpen.setStyle("icon", glyphIcons.drawTile(112));
            btnSave.setStyle("icon", glyphIcons.drawTile(111));
            //btnSet.setStyle("icon", glyphIcons.drawTile(18));
            btnResize.setStyle("icon", glyphIcons.drawTile(18));
            //btnCrop.setStyle("icon", glyphIcons.drawTile(82));
            btnColorCorrection.setStyle("icon", glyphIcons.drawTile(59));
            btnColorBW.setStyle("icon", glyphIcons.drawTile(100));
            btnRotate.setStyle("icon",glyphIcons.drawTile(28));
            statusLabel.text = "Ready to load image.";
			brandLabel.text = "1.1    |    Image2Gcode by Toolbotics    |     ";
			//startDialog();

        }

        protected function startDialog():void
        {
            //var startPopUpWindow:StartPopup = PopUpManager.createPopUp(this, StartPopup, true) as StartPopup;
            //startPopUpWindow.initWindow(myImage);
			//startPopUpWindow.initWindow2(data);
            //startPopUpWindow.addEventListener("resizeComplete", resizedImage);
            //PopUpManager.centerPopUp(startPopUpWindow);
        }

        private function clearImageContainer():void
        {
            if (_imageContainer != null)
            {
                clearContainer(_imageContainer);
            }
        }

        static private function clearContainer(container:DisplayObjectContainer):void
        {
            while (container.numChildren > 0)
            {
                container.removeChildAt(0);
            }
        }

        protected function btnOpen_clickHandler(event:MouseEvent):void
        {
            clearImageContainer();
            statusLabel.text = "   Waiting for image...";
            myImage.addEventListener("RasterImageUpdate", imageLoaded);
            myImage.loadImageFromDisk();
        }


        private function imageLoaded(event:Event):void
        {
            statusLabel.text = "   Image Loaded: " + myImage.fileName + " (" + myImage.imageWidthInPX + " x " + myImage.imageHeightInPX + " Pixels)";
            imageInfoLabel.text = "Image Size: ?  |  Burn Time: ?   ";
            showImageOnScreen(myImage.source);
        }

        private function resizedImage(event:Event):void
        {
            statusLabel.text = "   Image: "+ myImage.fileName+" (" + myImage.imageWidthInPX + " x " + myImage.imageHeightInPX + " Pixels)  Output Settings Saved " ;
            imageInfoLabel.text = "Image Size: " + myImage.imageWidthInMM + " x " + myImage.imageHeightInMM + " mm" + "  |  Burn Time: " + (myImage.getPrintTime()).toFixed(0) + " Minutes";
        }

        private function showImageOnScreen(bitmap:Bitmap):void
        {
            if (_imageContainer == null)
            {
                _imageContainer = new SpriteVisualElement();
            }

            addElementAt(_imageContainer, 0);
            _imageContainer.addChild(bitmap);

            if (bitmap.width > width || bitmap.height > height)
            {
                var hRatio:Number = bitmap.width / width;
                var vRatio:Number = bitmap.height / (height - 72);

                if (hRatio >= vRatio)
                {
                    bitmap.width = width;
                    bitmap.scaleY = bitmap.scaleX;
                }
                else
                {
                    bitmap.height = (height - 72);
                    bitmap.scaleX = bitmap.scaleY;
                }
            }

            // Center the bitmap in the display area
            bitmap.x = (width - bitmap.width) / 2;
            bitmap.y = ((height - bitmap.height - 72) / 2) + 48;
            inColor = false;

            _imageContainer.filters = [myImage.bwFilter];
        }

        protected function btnResize_clickHandler(event:MouseEvent):void
        {
            var resizePopUpWindow:ResizePopup = PopUpManager.createPopUp(this, ResizePopup, true) as ResizePopup;
            resizePopUpWindow.initWindow(myImage);
			resizePopUpWindow.initWindow2(data);
            resizePopUpWindow.addEventListener("resizeComplete", resizedImage);
            PopUpManager.centerPopUp(resizePopUpWindow);
        }

        /*protected function btnSet_clickHandler(event:MouseEvent):void
        {
            var settingsPopUpWindow:SettingsPopup = PopUpManager.createPopUp(this, SettingsPopup, true) as SettingsPopup;
            settingsPopUpWindow.initWindow(data);
            settingsPopUpWindow.addEventListener("settingsChanged", resizedImage);
            PopUpManager.centerPopUp(settingsPopUpWindow);
        }*/

        private function btnColorBW_clickHandler():void
        {
            if (inColor)
            {
                _imageContainer.filters = [myImage.bwFilter];
                inColor = false;
            }
            else
            {
                _imageContainer.filters = [];
                inColor = true;
            }
        }

        private function btnSave_clickHandler(event:MouseEvent):void
        {
            statusLabel.text = "Exporting Image....";
            myImage.addEventListener("ExportFailed", exportFailed);
            myImage.addEventListener("ExportFinished", exportFinished);
            myImage.exportGCode();
        }

        private function exportFailed(event:Event):void
        {
            statusLabel.text = "Export Failed.  Unable to write file to disk.";
        }

        private function exportFinished(event:Event):void
        {
            statusLabel.text = "Export Completed: " + myImage.fileName + " (" + myImage.imageWidthInPX + " x " + myImage.imageHeightInPX + " Pixels)";
        }

        private function btnColorCorrection_clickHandler(event:MouseEvent):void
        {
            var ColorCorrectorPopupWindow:ColorCorrectorPopup = PopUpManager.createPopUp(this, ColorCorrectorPopup, false) as ColorCorrectorPopup;
            ColorCorrectorPopupWindow.initWindow(myImage.bwMatrix);
            PopUpManager.centerPopUp(ColorCorrectorPopupWindow);
            ColorCorrectorPopupWindow.addEventListener("ColorMatrixChanged", updateImageColorFilter);
        }

        private function updateImageColorFilter(event:Event):void
        {
            myImage.bwMatrix = event.currentTarget.colorMatrix;
            _imageContainer.filters = [];
            myImage.reloadFilter();
            if (!inColor) _imageContainer.filters = [myImage.bwFilter];
        }

        private function btnRotate_clickHandler(event:MouseEvent):void
        {
            myImage.rotateImage();
            clearImageContainer();
            showImageOnScreen(myImage.source);
        }
        ]]>
    </fx:Script>

    <s:layout>
        <s:ConstraintLayout />
    </s:layout>

    <s:SkinnableContainer id="menuBarGroup" top="0" left="0" right="0" height="58" backgroundColor="#D6D6D6">
        <s:layout>
            <s:HorizontalLayout paddingLeft="10" paddingRight="10" horizontalAlign="left" verticalAlign="middle" />
        </s:layout>
        <s:Button id="btnOpen" label="Load Image" iconPlacement="top" click="btnOpen_clickHandler(event)" />
        <s:Spacer width="48" />
        <s:Button id="btnRotate" label="Rotate Image" iconPlacement="top" enabled="{myImage.imageLoaded}" click="btnRotate_clickHandler(event)" />
        <s:Button id="btnColorCorrection" label="Image Saturation" iconPlacement="top" enabled="{myImage.imageLoaded}" click="btnColorCorrection_clickHandler(event)" />
        <s:Spacer width="48" />
        <s:Button id="btnResize" label="Output Settings" iconPlacement="top" enabled="{myImage.imageLoaded}" click="btnResize_clickHandler(event)" />
        <!--<s:Button id="btnCrop" label="Crop" iconPlacement="top" enabled="{myImage.imageLoaded}" /> -->
        <s:Button id="btnSave" label="Export GCode" iconPlacement="top" enabled="{myImage.imageLoaded}" click="btnSave_clickHandler(event)"/>
        <s:Spacer width="100%" />
        <s:Button id="btnColorBW" label="Original / Raster" iconPlacement="top" enabled="{myImage.imageLoaded}" click="btnColorBW_clickHandler()" />
    </s:SkinnableContainer>	
	
	<s:SkinnableContainer id="menuLine" top="58" left="0" right="0" height="1" backgroundColor="#000000">
    </s:SkinnableContainer>	
	
	<s:SkinnableContainer id="statusLine" bottom="28" left="0" right="0" height="1" backgroundColor="#000000">
    </s:SkinnableContainer>

    <s:SkinnableContainer id="statusBarGroup" bottom="0" left="0" right="0" height="28" backgroundColor="#D6D6D6" color="#000000">
        <s:layout>
            <s:HorizontalLayout paddingLeft="10" paddingRight="10" horizontalAlign="left" verticalAlign="middle"/>
        </s:layout>		
        <s:Label id="brandLabel" text="" />
        <s:Label id="statusLabel" text="" />
        <s:Spacer width="100%" />
        <s:Label id="imageInfoLabel" text="" />
    </s:SkinnableContainer>

    <s:SpriteVisualElement id="imageDisplay" left="0" right="0" top="58" bottom="28" />

</s:Application>
